generator client {
  provider = "prisma-client-js"
  output       = "../src/generated/mongo"
  moduleFormat = "esm"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  username String   @unique
  password String
  role     UserRole @default(USER)

  rewardRequests UserRewardRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  OPERATOR // 운영자 (이벤트/보상 등록)
  AUDITOR // 감사자 (보상 이력 조회만 가능)
  ADMIN // 관리자 (모든 기능 접근 가능)
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  eventType EventType @default(GENERIC)
  conditions  Json?
  startDate   DateTime
  endDate     DateTime
  status      EventStatus @default(INACTIVE)
  npcName     String?

  rewards      Reward[]
  userRequests UserRewardRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([status, startDate, endDate])
}

enum EventType {
  GENERIC // 일반 조건형 이벤트
  DAILY_LOGIN // 누적 출석 이벤트
  DAILY_TASK // 일일 과제 완료형 이벤트
  ITEM_COLLECTION // 아이템 수집형 이벤트
}

enum EventStatus {
  ACTIVE // 활성 상태
  INACTIVE // 비활성 상태 (준비 중)
  ENDED // 종료된 상태
}

model Reward {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           String
  quantity       Int
  externalItemId String? @unique

  rewardOrder Int? // 일반 이벤트 보상에는 null, 데일리/누적형 보상에는 1부터 순차적인 값을 부여

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  UserRewardRequest UserRewardRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRewardRequest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  rewardId String @db.ObjectId
  reward   Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  status      RequestStatus @default(PENDING)
  claimedDate String // YYYY-MM-DD

  requestedAt DateTime      @default(now())

  @@unique([userId, eventId, rewardId, claimedDate], name: "unique_user_event_reward_claim")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  PAID_OUT
  FAILED
}
